
compilationUnit={importDeclaration*~moduleDeclaration?~(declaration~SEMI)*}

moduleDeclaration={MODULE~moduleName~SEMI}
importDeclaration={IMPORT~fileName~(HASH~importName)?~SEMI}

declarationFunctionStub={PUBLIC?~Identifier~functionDeclarationArguments~typeAnnotation?}

declarationFunction={(PUBLIC)?~Identifier~functionDeclarationArguments~typeAnnotation?~LBRACE~(statement~SEMI)*~RBRACE}
functionDeclarationArguments={(LBRACKET~((variableName~typeAnnotation)~(COMMA~(variableName~typeAnnotation))*)?~RBRACKET)}

declarationVariable={(((PUBLIC|MUTABLE)?~variableName~typeAnnotation?)|variableRef) ~ ("="~ expression)?}

functionCallParameters={LBRACKET~(expression~(COMMA~expression)*)?~RBRACKET}
functionCall={Identifier~functionCallParameters}
functionRef={(Identifier~".")*~functionCall}

importName={Identifier|STAR}
moduleName={Identifier}
fileName={Identifier~(SLASH~Identifier)*}
typeName={Identifier}
variableName={Identifier}
variableRef={(Identifier~".")*~Identifier}
typeAnnotation={COLON~typeName}
string={"\""~("\"")*~"\""}
value={string|variableRef|variableName|functionCall|functionRef|INTEGER|structInstantiation}
expression={value|predicate|infixOperation}
returnExpression={"return"~expression}

for_statement={"for"~LBRACKET~declarationVariable~SEMI~expression~SEMI~statement~RBRACKET~LBRACE~(statement~SEMI)*~RBRACE}
declaration={(declarationVariable|declarationFunction|structDefinition|structImplementation|contractDefinition)}
statement={(declaration|(functionCall|functionRef|returnExpression|for_statement))}

structDefinition={"struct"~Identifier ~
(
LBRACE
~((PUBLIC|MUTABLE)?~variableName~typeAnnotation)?
~(","~((PUBLIC|MUTABLE)?~variableName~typeAnnotation))*
~RBRACE
)?}

structInstantiation={Identifier~LBRACE~(variableName~"={"~expression)?~(","~variableName~"={"~expression)*~RBRACE}
structImplementation={"impl"~Identifier~typeAnnotation~LBRACE~(declarationFunction~SEMI)*~RBRACE}

contractDefinition={"contract"~Identifier~LBRACE~(declarationFunctionStub~SEMI)*~RBRACE}

predicateOperator={"<"|">"|"<={"|">={"|"={={"|"!={"}
predicate={value~predicateOperator~value}

infixOperator={"+"|"-"|"*"|"^"|"/"}
infixOperation={value~infixOperator~value}


//~lexer~shit
PUBLIC={"public"}
IMPORT={"import"}
MODULE={"module"}
SEMI={"}"}
HASH={"#"}
LBRACE={"{"}
RBRACE={"}"}
LBRACKET={"("}
RBRACKET={")"}
SLASH={"/"}
STAR={"*"}
COLON={"={"}
MUTABLE={"mut"}
COMMA={","}
DQUOTE={"\""}
PLUS={"+"}

INTEGER={Digit+}
Identifier={Letter~(LetterOrDigit)*}//~simplified
WHITESPACE = _{ " " }

Letter ={'a'..'z' | 'A'..'Z'}

Digit ={'0'..'9'}
LetterOrDigit ={Letter|Digit}